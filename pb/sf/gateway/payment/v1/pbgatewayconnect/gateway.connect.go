// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: sf/gateway/payment/v1/gateway.proto

package pbgatewayconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/streamingfast/payment-gateway/pb/sf/gateway/payment/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// DiscoverServiceName is the fully-qualified name of the DiscoverService service.
	DiscoverServiceName = "sf.gateway.payment.v1.DiscoverService"
	// UsageServiceName is the fully-qualified name of the UsageService service.
	UsageServiceName = "sf.gateway.payment.v1.UsageService"
	// AuthServiceName is the fully-qualified name of the AuthService service.
	AuthServiceName = "sf.gateway.payment.v1.AuthService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// DiscoverServiceServicesProcedure is the fully-qualified name of the DiscoverService's Services
	// RPC.
	DiscoverServiceServicesProcedure = "/sf.gateway.payment.v1.DiscoverService/Services"
	// UsageServiceReportProcedure is the fully-qualified name of the UsageService's Report RPC.
	UsageServiceReportProcedure = "/sf.gateway.payment.v1.UsageService/Report"
	// AuthServiceAuthenticateProcedure is the fully-qualified name of the AuthService's Authenticate
	// RPC.
	AuthServiceAuthenticateProcedure = "/sf.gateway.payment.v1.AuthService/Authenticate"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	discoverServiceServiceDescriptor        = v1.File_sf_gateway_payment_v1_gateway_proto.Services().ByName("DiscoverService")
	discoverServiceServicesMethodDescriptor = discoverServiceServiceDescriptor.Methods().ByName("Services")
	usageServiceServiceDescriptor           = v1.File_sf_gateway_payment_v1_gateway_proto.Services().ByName("UsageService")
	usageServiceReportMethodDescriptor      = usageServiceServiceDescriptor.Methods().ByName("Report")
	authServiceServiceDescriptor            = v1.File_sf_gateway_payment_v1_gateway_proto.Services().ByName("AuthService")
	authServiceAuthenticateMethodDescriptor = authServiceServiceDescriptor.Methods().ByName("Authenticate")
)

// DiscoverServiceClient is a client for the sf.gateway.payment.v1.DiscoverService service.
type DiscoverServiceClient interface {
	Services(context.Context, *connect.Request[v1.ServicesRequest]) (*connect.Response[v1.ServicesResponse], error)
}

// NewDiscoverServiceClient constructs a client for the sf.gateway.payment.v1.DiscoverService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewDiscoverServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) DiscoverServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &discoverServiceClient{
		services: connect.NewClient[v1.ServicesRequest, v1.ServicesResponse](
			httpClient,
			baseURL+DiscoverServiceServicesProcedure,
			connect.WithSchema(discoverServiceServicesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// discoverServiceClient implements DiscoverServiceClient.
type discoverServiceClient struct {
	services *connect.Client[v1.ServicesRequest, v1.ServicesResponse]
}

// Services calls sf.gateway.payment.v1.DiscoverService.Services.
func (c *discoverServiceClient) Services(ctx context.Context, req *connect.Request[v1.ServicesRequest]) (*connect.Response[v1.ServicesResponse], error) {
	return c.services.CallUnary(ctx, req)
}

// DiscoverServiceHandler is an implementation of the sf.gateway.payment.v1.DiscoverService service.
type DiscoverServiceHandler interface {
	Services(context.Context, *connect.Request[v1.ServicesRequest]) (*connect.Response[v1.ServicesResponse], error)
}

// NewDiscoverServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewDiscoverServiceHandler(svc DiscoverServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	discoverServiceServicesHandler := connect.NewUnaryHandler(
		DiscoverServiceServicesProcedure,
		svc.Services,
		connect.WithSchema(discoverServiceServicesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/sf.gateway.payment.v1.DiscoverService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case DiscoverServiceServicesProcedure:
			discoverServiceServicesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedDiscoverServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedDiscoverServiceHandler struct{}

func (UnimplementedDiscoverServiceHandler) Services(context.Context, *connect.Request[v1.ServicesRequest]) (*connect.Response[v1.ServicesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sf.gateway.payment.v1.DiscoverService.Services is not implemented"))
}

// UsageServiceClient is a client for the sf.gateway.payment.v1.UsageService service.
type UsageServiceClient interface {
	Report(context.Context, *connect.Request[v1.ReportRequest]) (*connect.Response[v1.ReportResponse], error)
}

// NewUsageServiceClient constructs a client for the sf.gateway.payment.v1.UsageService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewUsageServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) UsageServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &usageServiceClient{
		report: connect.NewClient[v1.ReportRequest, v1.ReportResponse](
			httpClient,
			baseURL+UsageServiceReportProcedure,
			connect.WithSchema(usageServiceReportMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// usageServiceClient implements UsageServiceClient.
type usageServiceClient struct {
	report *connect.Client[v1.ReportRequest, v1.ReportResponse]
}

// Report calls sf.gateway.payment.v1.UsageService.Report.
func (c *usageServiceClient) Report(ctx context.Context, req *connect.Request[v1.ReportRequest]) (*connect.Response[v1.ReportResponse], error) {
	return c.report.CallUnary(ctx, req)
}

// UsageServiceHandler is an implementation of the sf.gateway.payment.v1.UsageService service.
type UsageServiceHandler interface {
	Report(context.Context, *connect.Request[v1.ReportRequest]) (*connect.Response[v1.ReportResponse], error)
}

// NewUsageServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewUsageServiceHandler(svc UsageServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	usageServiceReportHandler := connect.NewUnaryHandler(
		UsageServiceReportProcedure,
		svc.Report,
		connect.WithSchema(usageServiceReportMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/sf.gateway.payment.v1.UsageService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case UsageServiceReportProcedure:
			usageServiceReportHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedUsageServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedUsageServiceHandler struct{}

func (UnimplementedUsageServiceHandler) Report(context.Context, *connect.Request[v1.ReportRequest]) (*connect.Response[v1.ReportResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sf.gateway.payment.v1.UsageService.Report is not implemented"))
}

// AuthServiceClient is a client for the sf.gateway.payment.v1.AuthService service.
type AuthServiceClient interface {
	Authenticate(context.Context, *connect.Request[v1.AuthenticateRequest]) (*connect.Response[v1.AuthenticateResponse], error)
}

// NewAuthServiceClient constructs a client for the sf.gateway.payment.v1.AuthService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAuthServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AuthServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &authServiceClient{
		authenticate: connect.NewClient[v1.AuthenticateRequest, v1.AuthenticateResponse](
			httpClient,
			baseURL+AuthServiceAuthenticateProcedure,
			connect.WithSchema(authServiceAuthenticateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// authServiceClient implements AuthServiceClient.
type authServiceClient struct {
	authenticate *connect.Client[v1.AuthenticateRequest, v1.AuthenticateResponse]
}

// Authenticate calls sf.gateway.payment.v1.AuthService.Authenticate.
func (c *authServiceClient) Authenticate(ctx context.Context, req *connect.Request[v1.AuthenticateRequest]) (*connect.Response[v1.AuthenticateResponse], error) {
	return c.authenticate.CallUnary(ctx, req)
}

// AuthServiceHandler is an implementation of the sf.gateway.payment.v1.AuthService service.
type AuthServiceHandler interface {
	Authenticate(context.Context, *connect.Request[v1.AuthenticateRequest]) (*connect.Response[v1.AuthenticateResponse], error)
}

// NewAuthServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAuthServiceHandler(svc AuthServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	authServiceAuthenticateHandler := connect.NewUnaryHandler(
		AuthServiceAuthenticateProcedure,
		svc.Authenticate,
		connect.WithSchema(authServiceAuthenticateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/sf.gateway.payment.v1.AuthService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AuthServiceAuthenticateProcedure:
			authServiceAuthenticateHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAuthServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAuthServiceHandler struct{}

func (UnimplementedAuthServiceHandler) Authenticate(context.Context, *connect.Request[v1.AuthenticateRequest]) (*connect.Response[v1.AuthenticateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sf.gateway.payment.v1.AuthService.Authenticate is not implemented"))
}
